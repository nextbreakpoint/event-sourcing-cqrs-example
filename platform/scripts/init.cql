CREATE ROLE IF NOT EXISTS admin WITH PASSWORD = 'password' AND LOGIN = true;
CREATE ROLE IF NOT EXISTS verticle WITH PASSWORD = 'password' AND LOGIN = true;

CREATE KEYSPACE IF NOT EXISTS designs_aggregate WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

GRANT ALL PERMISSIONS on KEYSPACE designs_aggregate TO admin;
GRANT ALL PERMISSIONS on KEYSPACE designs_aggregate TO verticle;

USE designs_aggregate;

CREATE TABLE IF NOT EXISTS MESSAGE (
    MESSAGE_KEY TEXT,
    MESSAGE_VALUE TEXT,
    MESSAGE_TOKEN TEXT,
    MESSAGE_UUID UUID,
    MESSAGE_TYPE TEXT,
    MESSAGE_SOURCE TEXT,
    MESSAGE_TIMESTAMP TIMESTAMP,
    TRACING_TRACE_ID TEXT,
    TRACING_SPAN_ID TEXT,
    PRIMARY KEY (MESSAGE_KEY, MESSAGE_TOKEN)
) WITH CLUSTERING ORDER BY (MESSAGE_TOKEN ASC);

CREATE INDEX IF NOT EXISTS MESSAGE_UUID_IDX ON MESSAGE (MESSAGE_UUID);

CREATE TYPE IF NOT EXISTS LEVEL (
    REQUESTED INT,
    COMPLETED SET<INT>,
    FAILED SET<INT>
);

CREATE TABLE IF NOT EXISTS DESIGN (
    DESIGN_UUID UUID,
    DESIGN_DATA TEXT,
    DESIGN_CHECKSUM TEXT,
    DESIGN_REVISION TEXT,
    DESIGN_STATUS TEXT,
    DESIGN_LEVELS INT,
    DESIGN_TILES MAP<INT, FROZEN<LEVEL>>,
    DESIGN_TIMESTAMP TIMESTAMP,
    COMMAND_UUID UUID,
    COMMAND_USER UUID,
    PRIMARY KEY (DESIGN_UUID)
);

CREATE KEYSPACE IF NOT EXISTS designs_command WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

GRANT ALL PERMISSIONS on KEYSPACE designs_command TO admin;
GRANT ALL PERMISSIONS on KEYSPACE designs_command TO verticle;

USE designs_command;

CREATE TYPE IF NOT EXISTS LEVEL (
    REQUESTED INT,
    COMPLETED SET<INT>,
    FAILED SET<INT>
);

CREATE TABLE IF NOT EXISTS MESSAGE (
    MESSAGE_KEY TEXT,
    MESSAGE_VALUE TEXT,
    MESSAGE_TOKEN TEXT,
    MESSAGE_UUID UUID,
    MESSAGE_TYPE TEXT,
    MESSAGE_SOURCE TEXT,
    MESSAGE_TIMESTAMP TIMESTAMP,
    TRACING_TRACE_ID TEXT,
    TRACING_SPAN_ID TEXT,
    PRIMARY KEY (MESSAGE_KEY, MESSAGE_TOKEN)
) WITH CLUSTERING ORDER BY (MESSAGE_TOKEN ASC);

CREATE INDEX IF NOT EXISTS MESSAGE_UUID_IDX ON MESSAGE (MESSAGE_UUID);

CREATE TABLE IF NOT EXISTS DESIGN (
    DESIGN_UUID UUID,
    DESIGN_DATA TEXT,
    DESIGN_CHECKSUM TEXT,
    DESIGN_REVISION TEXT,
    DESIGN_STATUS TEXT,
    DESIGN_LEVELS INT,
    DESIGN_TILES MAP<INT, FROZEN<LEVEL>>,
    DESIGN_TIMESTAMP TIMESTAMP,
    COMMAND_UUID UUID,
    COMMAND_USER UUID,
    PRIMARY KEY (DESIGN_UUID)
);


CREATE KEYSPACE IF NOT EXISTS test_designs_aggregate WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

GRANT ALL PERMISSIONS on KEYSPACE test_designs_aggregate TO admin;
GRANT ALL PERMISSIONS on KEYSPACE test_designs_aggregate TO verticle;

USE test_designs_aggregate;

CREATE TABLE IF NOT EXISTS MESSAGE (
    MESSAGE_KEY TEXT,
    MESSAGE_VALUE TEXT,
    MESSAGE_TOKEN TEXT,
    MESSAGE_UUID UUID,
    MESSAGE_TYPE TEXT,
    MESSAGE_SOURCE TEXT,
    MESSAGE_TIMESTAMP TIMESTAMP,
    TRACING_TRACE_ID TEXT,
    TRACING_SPAN_ID TEXT,
    PRIMARY KEY (MESSAGE_KEY, MESSAGE_TOKEN)
) WITH CLUSTERING ORDER BY (MESSAGE_TOKEN ASC);

CREATE INDEX IF NOT EXISTS MESSAGE_UUID_IDX ON MESSAGE (MESSAGE_UUID);

CREATE TYPE IF NOT EXISTS LEVEL (
    REQUESTED INT,
    COMPLETED SET<INT>,
    FAILED SET<INT>
);

CREATE TABLE IF NOT EXISTS DESIGN (
    DESIGN_UUID UUID,
    DESIGN_DATA TEXT,
    DESIGN_CHECKSUM TEXT,
    DESIGN_REVISION TEXT,
    DESIGN_STATUS TEXT,
    DESIGN_LEVELS INT,
    DESIGN_TILES MAP<INT, FROZEN<LEVEL>>,
    DESIGN_TIMESTAMP TIMESTAMP,
    COMMAND_UUID UUID,
    COMMAND_USER UUID,
    PRIMARY KEY (DESIGN_UUID)
);

CREATE KEYSPACE IF NOT EXISTS test_designs_command WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

GRANT ALL PERMISSIONS on KEYSPACE test_designs_command TO admin;
GRANT ALL PERMISSIONS on KEYSPACE test_designs_command TO verticle;

USE test_designs_command;

CREATE TABLE IF NOT EXISTS MESSAGE (
    MESSAGE_KEY TEXT,
    MESSAGE_VALUE TEXT,
    MESSAGE_TOKEN TEXT,
    MESSAGE_UUID UUID,
    MESSAGE_TYPE TEXT,
    MESSAGE_SOURCE TEXT,
    MESSAGE_TIMESTAMP TIMESTAMP,
    TRACING_TRACE_ID TEXT,
    TRACING_SPAN_ID TEXT,
    PRIMARY KEY (MESSAGE_KEY, MESSAGE_TOKEN)
) WITH CLUSTERING ORDER BY (MESSAGE_TOKEN ASC);

CREATE INDEX IF NOT EXISTS MESSAGE_UUID_IDX ON MESSAGE (MESSAGE_UUID);

