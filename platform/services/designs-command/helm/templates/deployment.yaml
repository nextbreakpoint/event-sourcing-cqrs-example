{{- $fullname := include "service.fullname" . -}}
{{- $name := include "service.name" . -}}
{{- $chart := include "service.chart" . -}}
{{- $root := . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $root.Values.name | default "designs-command" | quote }}
  namespace: {{ $root.Release.Namespace | quote }}
  labels:
    app: {{ $root.Values.name | default "designs-command" | quote }}
    chart: {{ $chart }}
    release: {{ $root.Release.Name }}
    heritage: {{ $root.Release.Service }}
spec:
  replicas: {{ $root.Values.replicas | default 0 }}
  {{- if $root.Values.strategy }}
  strategy:
    {{ toYaml $root.Values.strategy | indent 4 | trim }}
  {{- end}}
  selector:
    matchLabels:
      app: {{ $root.Values.name | default "designs-command" | quote }}
  template:
    metadata:
      {{- if $root.Values.annotations }}
      annotations:
        {{ toYaml $root.Values.annotations | indent 8 | trim }}
      {{- end}}
      labels:
        app: {{ $root.Values.name | default "designs-command" | quote }}
    spec:
      serviceAccountName: {{ $root.Values.serviceAccount | default "designs-command-service" }}
      {{- if $root.Values.image }}
      {{- if $root.Values.image.pullSecrets }}
      imagePullSecrets:
        - name: {{ toYaml $root.Values.image.pullSecrets | indent 8 | trim }}
      {{- end}}
      {{- end}}
      volumes:
        - name: config-vol
          configMap:
            name: {{ $root.Values.configName | default "designs-command" | quote }}
        - name: secret-vol
          secret:
            secretName: {{ $root.Values.secretName | default "designs-command" | quote }}
      containers:
        - name: {{ $root.Values.name | default "designs-command" | quote }}
          image: "{{ $root.Values.image.registry }}{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $root.Values.controlPort | default 8080 }}
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KEYSTORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.secretName | default "designs-command" | quote }}
                  key: KEYSTORE_SECRET
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.secretName | default "designs-aggregate" | quote }}
                  key: DATABASE_USERNAME
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.secretName | default "designs-aggregate" | quote }}
                  key: DATABASE_PASSWORD
            - name: JAEGER_ATTRIBUTES
              value: 'service.name={{ $root.Values.name | default "gateway" }},service.version={{ $root.Values.image.tag }},service.namespace={{ $root.Release.Namespace }},environment={{ $root.Values.environment | default "dev" }},release={{ $root.Release.Name }}'
            - name: JAEGER_ENDPOINT
              value: {{ $root.Values.jaegerEndpoint | default "http://jaeger:14250" | quote }}
          volumeMounts:
            - name: config-vol
              readOnly: true
              mountPath: /etc/config.json
              subPath: config.json
            - name: secret-vol
              readOnly: true
              mountPath: /etc/keystore_server.jks
              subPath: keystore_server.jks
            - name: secret-vol
              readOnly: true
              mountPath: /etc/keystore_auth.jceks
              subPath: keystore_auth.jceks
          {{- if $root.Values.resources }}
          resources:
            {{ $root.Values.resources | toYaml | indent 12 | trim }}
          {{- end}}
