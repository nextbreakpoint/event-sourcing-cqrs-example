<body>
    <header><p><b>The Beauty of Chaos</b> | Fractals</p></header>
    <div class="images" id="images">
        <div class="pages" id="pages">
            <div class="page">
                {{#each grid}}
                    <div class="row">
                    {{#each .}}
                        <div id="{{design.uuid}}" class="cell"><a href="{{design.location}}"><img src="{{imageUrl}}" alt="{{design.location}}"/></a></div>
                    {{/each}}
                    </div>
                {{/each}}
            </div>
        </div>
    </div>
    {{#if show}}
    <div class="next">
        <a href="/browse/designs.html?page={{nextPage}}">Show next designs</a>
    </div>
    {{/if}}
    <footer>
        <p>Powered by <a href="https://nextbreakpoint.com">NextBreakpoint</a>{{#if admin}} | <a href="../admin/designs.html">Edit</a>{{/if}}{{#if login}} | <a href="{{config.api_url}}/v1/auth/signin/browse/designs.html">Login</a>{{/if}}{{#if logout}} | <a href="{{config.api_url}}/v1/auth/signout/browse/designs.html">Logout</a>{{/if}}</p>
    </footer>
    <script>
        domReady(function(event) {
            function get(url, async, callback) {
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        if (callback) {
                            callback(this.responseText);
                        }
                    }
                };
                xhttp.open("GET", url, async);
                xhttp.send();
            }

            function configure(page, lastPage, callback) {
                get("/browse/designs.json?page=" + page, true, function(response) {
                    let pages = document.getElementById("pages");

                    pages.replaceChildren();
                    pages.insertAdjacentHTML('beforeend', response)
                    resize();
                    callback();

                    if (page > 0) {
                        get("/browse/designs.json?page=" + (page - 1), false, function(response) {
                            let pages = document.getElementById("pages");
                            pages.insertAdjacentHTML('afterbegin', response)
                            resize();
                        });
                    }

                    if (page < lastPage) {
                        get("/browse/designs.json?page=" + (page + 1), false, function(response) {
                            let pages = document.getElementById("pages");
                            pages.insertAdjacentHTML('beforeend', response)
                            resize();
                        });
                    }
                });

                let nexts = document.querySelectorAll(".next");

                for (let i = 0; i < nexts.length; i++) {
                    nexts[i].style.visibility = "hidden";
                }
            }

            function setup() {
                window.addEventListener('resize', function(e) {
                    resize();
                });

                window.addEventListener('wheel', function(e) {
                    let pages = document.getElementById("pages");
                    let images = document.getElementById("images");
                    let size = Math.round(window.innerWidth / 8);
                    let extraHeight = images.clientHeight;
                    let pageHeight = pages.children[0].clientHeight;

                    if (e.deltaMode == 0 && e.deltaY != 0) {
                        var top = new Number(pages.style.top.substring(0, pages.style.top.length - 2)) - e.deltaY;

                        if (top > pageHeight * page) {
                            top = pageHeight * page;
                        }

                        if (top < -pageHeight * lastPage) {
                            top = -pageHeight * lastPage;
                        }

                        if (page < lastPage && top < -pageHeight) {
                            page = page + 1;
                            console.log("page = " + page);
                            pages.children[0].remove();
                            get("/browse/designs.json?page=" + page, false, function(response) {
                                let pages = document.getElementById("pages");
                                pages.insertAdjacentHTML('beforeend', response)
                                resize();
                            });
                            top += pageHeight;
                        }

                        if (page > 0 && top > 0) {
                            page = page - 1;
                            console.log("page = " + page);
                            pages.children[pages.children.length - 1].remove();
                            get("/browse/designs.json?page=" + page, false, function(response) {
                                let pages = document.getElementById("pages");
                                pages.insertAdjacentHTML('afterbegin', response)
                                resize();
                            });
                            top -= pageHeight;
                        }

                        pages.style.top = top + "px";
                    }
                });
            }

            function resize() {
                console.log("resizing");

                let size = Math.round(window.innerWidth / 8);

                let rows = document.querySelectorAll(".row");
                for (let i = 0; i < rows.length; i++) {
                    rows[i].style.width = (size * 8) + "px";
                    rows[i].style.height = size + "px";
                }

                let cells = document.querySelectorAll(".cell");
                for (let i = 0; i < cells.length; i++) {
                    cells[i].style.width = size + "px";
                    cells[i].style.height = size + "px";
                }
            }

            var page = {{page}};
            let lastPage = {{lastPage}};

            console.log("page = " + page);
            console.log("lastPage = " + lastPage);

            configure(page, lastPage, setup);
        })
    </script>
</body>
