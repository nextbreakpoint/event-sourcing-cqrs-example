<body>
    <header><p><b>The Beauty of Chaos</b> | Fractals</p></header>
    <div class="images" id="images">
        <div class="pages" id="pages">
{{!--             <div class="page" id="page-{{page}}"> --}}
{{!--                 {{#each grid}} --}}
{{!--                     <div class="row"> --}}
{{!--                     {{#each .}} --}}
{{!--                         <div id="{{design.uuid}}" class="cell"><a href="{{design.location}}"><img src="{{imageUrl}}" alt="{{design.location}}"/></a></div> --}}
{{!--                     {{/each}} --}}
{{!--                     </div> --}}
{{!--                 {{/each}} --}}
{{!--             </div> --}}
        </div>
    </div>
    {{#if show}}
    <div class="next">
        <a href="/browse/designs.html?page={{nextPage}}">Show next designs</a>
    </div>
    {{/if}}
    <footer>
        <p>Powered by <a href="https://nextbreakpoint.com">NextBreakpoint</a>{{#if admin}} | <a href="../admin/designs.html">Edit</a>{{/if}}{{#if login}} | <a href="{{config.api_url}}/v1/auth/signin/browse/designs.html">Login</a>{{/if}}{{#if logout}} | <a href="{{config.api_url}}/v1/auth/signout/browse/designs.html">Logout</a>{{/if}}</p>
    </footer>
    <script>
        domReady(function(event) {
            function configure(page, lastPage, callback) {
                console.log("configure pages");

                console.log("current page = " + page);
                console.log("last page = " + lastPage);

                let links = document.querySelectorAll(".next");
                for (let i = 0; i < links.length; i++) {
                    links[i].style.visibility = "hidden";
                }

                function handleResponse(response) {
                    pagesData["page-" + page] = JSON.parse(response);

                    let pages = document.getElementById("pages");
                    pages.replaceChildren();
                    pages.insertAdjacentHTML('beforeend', "<div class=\"page\" id=\"slot-0\"/>");
                    pages.insertAdjacentHTML('beforeend', "<div class=\"page\" id=\"slot-1\"/>");
                    pages.insertAdjacentHTML('beforeend', "<div class=\"page\" id=\"slot-2\"/>");

                    function submitRequest(page) {
                        fetch("/browse/designs.json?page=" + page + "&t=" + Date.now(), false, function(response) {
                            pagesData["page-" + page] = JSON.parse(response);
                        }, function(e) {
                            console.log("An error occurred while loading data from server. Retrying in 5 seconds...");
                            setTimeout(function() { submitRequest(page); }, 5000);
                        });
                    }

                    if (page > 0) {
                        submitRequest(page - 1);
                    }

                    if (page < lastPage) {
                        submitRequest(page + 1);
                    }

                    resizePages(page);

                    callback();
                }

                function submitRequest() {
                    fetch("/browse/designs.json?page=" + page + "&t=" + Date.now(), true, handleResponse, function(e) {
                        console.log("An error occurred while loading data from server. Retrying in 5 seconds...");
                        setTimeout(submitRequest, 5000);
                    });
                }

                submitRequest();
            }

            function renderGrid() {
                html = "";
                for (let i = 0; i < 16; i++) {
                    html += renderRow();
                }
                return html;
            }

            function renderRow() {
                html = "";
                for (let i = 0; i < 8; i++) {
                    html += renderCell();
                }
                return "<div class=\"row\">" + html + "</div>";
            }

            function renderCell() {
                return "<span class=\"cell\"><a href=\"\"><img src=\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20460%20215%22%3E%3C%2Fsvg%3E\" alt=\"\"/></a></span>";
            }

            function refreshPages(page) {
                console.log("refresh pages");

                console.log("page = " + page);

                delete pagesData["page-" + (page - 2)];
                delete pagesData["page-" + (page + 2)];

                if (page < lastPage && !pagesData["page-" + (page + 1)]) {
                    pagesData["page-" + (page + 1)] = [];
                    console.log("loading page data " + (page + 1));

                    function handlerResponse(response) {
                        if (pagesData["page-" + (page + 1)]) {
                            console.log("loaded page data " + (page + 1));
                            pagesData["page-" + (page + 1)] = JSON.parse(response);
                            renderPages(page, scroll);
                        } else {
                            console.log("discard loaded page data " + (page + 1));
                        }
                    }

                    function submitRequest() {
                        fetch("/browse/designs.json?page=" + (page + 1) + "&t=" + Date.now(), true, handlerResponse, function(e) {
                            if (pagesData["page-" + (page + 1)]) {
                                console.log("An error occurred while loading data from server. Retrying in 5 seconds...");
                                setTimeout(submitRequest, 5000);
                            }
                        });
                    }

                    submitRequest();
                }

                if (page > 0 && !pagesData["page-" + (page - 1)]) {
                    pagesData["page-" + (page - 1)] = [];
                    console.log("loading page data " + (page - 1));

                    function handlerResponse(response) {
                        if (pagesData["page-" + (page - 1)]) {
                            console.log("loaded page data " + (page - 1));
                            pagesData["page-" + (page - 1)] = JSON.parse(response);
                            renderPages(page, scroll);
                        } else {
                            console.log("discard loaded page data " + (page - 1));
                        }
                    }

                    function submitRequest() {
                        fetch("/browse/designs.json?page=" + (page - 1) + "&t=" + Date.now(), true, handlerResponse, function(e) {
                            if (pagesData["page-" + (page - 1)]) {
                                console.log("An error occurred while loading data from server. Retrying in 5 seconds...");
                                setTimeout(submitRequest, 5000);
                            }
                        });
                    }

                    submitRequest();
                }
            }

            function resizePages(page) {
                console.log("resize pages");

                let pageElement0 = document.getElementById("slot-0");
                let pageElement1 = document.getElementById("slot-1");
                let pageElement2 = document.getElementById("slot-2");

                pageElement0.innerHTML = renderGrid();
                pageElement1.innerHTML = renderGrid();
                pageElement2.innerHTML = renderGrid();

                let images = document.getElementById("images");
                imagesWidth = images.clientWidth;
                imagesHeight = images.clientHeight;

                let cellSize = resizeGrid(imagesWidth);

                let pageData = pagesData["page-" + page];
                pageHeight = pageData.length * cellSize;

                pageElement0.style.height = pageHeight + 'px';
                pageElement1.style.height = pageHeight + 'px';
                pageElement2.style.height = pageHeight + 'px';

                let pages = document.getElementById("pages");
                pages.style.marginTop = -pageHeight + "px";

                console.log("pageHeight = " + pageHeight);
                console.log("imagesWidth = " + imagesWidth);
                console.log("imagesHeight = " + imagesHeight);

                let newScroll = clampScrolling(page, scroll);

                scroll = newScroll;

                pages.style.top = newScroll + "px";

                renderPages(page, newScroll);
            }

            function swapPages(page, newPage) {
                console.log("swap pages");

                let pageElement0 = document.getElementById("slot-0");
                let pageElement1 = document.getElementById("slot-1");
                let pageElement2 = document.getElementById("slot-2");

                if (page > newPage) {
                    pageElement0.innerHTML = pageElement1.innerHTML;
                    pageElement1.innerHTML = pageElement2.innerHTML;
                    if (newPage < lastPage) {
                        resetPage("slot-2");
                    }
                } else {
                    pageElement2.innerHTML = pageElement1.innerHTML;
                    pageElement1.innerHTML = pageElement0.innerHTML;
                    if (newPage > 0) {
                        resetPage("slot-0");
                    }
                }
            }

            function resizeGrid(width) {
                console.log("resize grid");

                let size = Math.round(width / 8);

                let rows = document.querySelectorAll(".row");
                for (let i = 0; i < rows.length; i++) {
                    rows[i].style.width = (size * 8) + "px";
                    rows[i].style.height = size + "px";
                }

                let cells = document.querySelectorAll(".cell");
                for (let i = 0; i < cells.length; i++) {
                    cells[i].style.width = size + "px";
                    cells[i].style.height = size + "px";
                }

                return size;
            }

            function clampScrolling(page, value) {
                if (page == 0 && value > 0) {
                    value = 0;
                }

                if (page == lastPage && value < -(pageHeight - imagesHeight)) {
                    value = -(pageHeight - imagesHeight);
                }

                return value;
            }

            function updatePage(page, value) {
                if (page < lastPage && value < -pageHeight) {
                    swapPages(page, page - 1);
                    page = page + 1;
                    refreshPages(page);
                } else if (page > 0 && value > 0) {
                    swapPages(page, page + 1);
                    page = page - 1;
                    refreshPages(page);
                }

                return page;
            }

            function renderPage(page, index, value, slot) {
                let rows = document.querySelectorAll("#" + slot + " .row");

                let pageData = pagesData["page-" + index];

                if (!pageData) {
                    console.log("data not found");
                    return;
                }

                if (pageData.length != rows.length) {
                    console.log("page data and rows mismatch");
                    return;
                }

                for (let i = 0; i < pageData.length; i++) {
                    let rowTop = rows[i].getBoundingClientRect().top;
                    let rowBottom = rows[i].getBoundingClientRect().bottom;

                    let images = rows[i].getElementsByTagName("img");
                    let links = rows[i].getElementsByTagName("a");

                    let rowData = pageData[i];

                    if (rowData.length != images.length) {
                        console.log("row data and images mismatch");
                        break;
                    }

                    if (images.length != links.length) {
                        console.log("images and links mismatch");
                        break;
                    }

                    if (rowBottom > -imagesHeight && rowTop < imagesHeight * 2) {
//                         if (rowBottom > 0 && rowTop < imagesHeight) {
//                             rows[i].style.border = "1px solid red";

                        for (let j = 0; j < rowData.length; j++) {
                            if (images[j].src != rowData[j].imageUrl) {
                               images[j].src = rowData[j].imageUrl;
                               images[j].alt = rowData[j].design.location;
                            }
                            if (links[j].href != rowData[j].design.location) {
                               links[j].href = rowData[j].design.location + "?page=" + page + "&scroll=" + scroll;
                            }
                        }
                    }
                }
            }

            function resetPage(slot) {
                let rows = document.querySelectorAll("#" + slot + " .row");

                for (let i = 0; i < rows.length; i++) {
                    let images = rows[i].getElementsByTagName("img");
                    let links = rows[i].getElementsByTagName("a");

                    if (images.length != links.length) {
                        console.log("images and links mismatch");
                        break;
                    }

//                     rows[i].style.border = "1px solid green";

                    for (let j = 0; j < images.length; j++) {
                        if (images[j].src != "") {
                           images[j].src = "data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20460%20215%22%3E%3C%2Fsvg%3E";
                           images[j].alt = "";
                        }
                        if (links[j].href != "") {
                           links[j].href = "";
                        }
                    }
                }
            }

            function renderPages(page, value) {
                if (page > 0) {
                    renderPage(page, page - 1, value, "slot-0");
                }

                if (page >= 0) {
                    renderPage(page, page, value, "slot-1");
                }

                if (page < lastPage) {
                    renderPage(page, page + 1, value, "slot-2");
                }
            }

            function setup() {
                window.addEventListener('resize', function(e) {
                    resizePages(page);
                });

                window.addEventListener('wheel', function(e) {
                    if (pageHeight > 0 && e.deltaMode == 0 && e.deltaY != 0) {
                        let pages = document.getElementById("pages");

                        newScroll = scroll - e.deltaY;

                        newScroll = clampScrolling(page, newScroll);

                        newPage = updatePage(page, newScroll);

                        if (newPage < page) {
                            newScroll -= pageHeight;
                        } else if (newPage > page) {
                            newScroll += pageHeight;
                        }

                        pages.style.top = scroll + "px";

                        page = newPage;
                        scroll = newScroll;

                        if (timeout) {
                            clearTimeout(timeout);
                        }

                        timeout = setTimeout(function() {
                            history.replaceState({ scroll:newScroll, page:newPage }, "", document.location.href);
//                             console.log("replace state " + JSON.stringify(history.state));
                            renderPages(newPage, newScroll);
                        }, 200);
                    }
                });
//
//                 window.addEventListener("popstate", function(e) {
//                     if (e.state) {
//                         page = e.state.page;
//                         scroll = e.state.scroll;
//                     }
//                 });
            }

            var timeout = null;
            var lastPage = {{lastPage}};
            var pageHeight = 0;
            var imagesWidth = 0;
            var imagesHeight = 0;
            var pagesData = {};
            var page = {{page}};
            var scroll = {{scroll}};

            if (history.state) {
//                 console.log("state " + JSON.stringify(history.state));
                page = history.state.page;
                scroll = history.state.scroll;
            }

            configure(page, lastPage, setup);
        })
    </script>
</body>
